<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--每个映射文件中的namespace的值应该就是mapper接口的全限定名[必须的]
 jdk的动态代理就是基于接口,只能代理接口.
-->
<mapper namespace="tech.aistar.day02.mapper.StudentSqlMapper">
    <select id="findByIdorSnameAno" resultType="student">
        select * from db_student where id>#{id}
        <!--使用动态sql中的if语句来判断某个参数是否存在-->
        <if test="sname != null">
            and sname like #{sname}
        </if>
    </select>

    <select id="findByIdorSnameVo" parameterType="studentQueryVo" resultType="student">
        select * from db_student where id>#{student.id}
        <!--使用动态sql中的if语句来判断某个参数是否存在-->
        <if test="student.sname != null">
            and sname like concat('%',#{student.sname},'%')
        </if>
    </select>

    <!--新建一个sql片段-->
    <sql id="queryAll_sql">
        select * from db_student
    </sql>

    <select id="findAllByAnyConditional" resultType="student">
        <!--select * from db_student where 1=1-->
        <!--<if test="id != null">-->
            <!--and id > #{id}-->
        <!--</if>-->

        <!--<if test="sname !=null ">-->
            <!--and sname like concat('%',#{sname},'%')-->
        <!--</if>-->

        <!--select * from db_student
        引用sql片段-->
        <include refid="queryAll_sql"></include>
        <where>
           <!-- <if test="id != null">
                 and id > #{id}
            </if>
            <if test="sname !=null ">
              and sname like concat('%',#{sname},'%')
            </if>-->
            <include refid="sql_all_xml.query_where"></include>
       </where>
    </select>

    <update id="update" parameterType="student">
        update db_student
        <set>
            <if test="sno != null">sno = #{sno},</if>
            <if test="sname != null">sname=#{sname},</if>
            <if test="birthday != null">birthday=#{birthday}</if>
        </set>

        where id = #{id}
    </update>

    <select id="findAllByFirstConditional" resultType="student">
        <include refid="queryAll_sql"></include>
        <where>
            <choose>
                <when test="id != null">and id > #{id}</when>
                <when test="sname != null">and sname like concat("%",#{sname},"%")</when>
                <!--如果俩个条件都不存在,则执行otherwise-->
                <!--<otherwise>and 1=1</otherwise>-->
            </choose>
        </where>
    </select>

    <select id="findByIds" resultType="student">
        <include refid="queryAll_sql"></include>
        where
        <!--
            collection - 迭代的集合对象 - @Param("参数名")
            item 代表的就是迭代的集合中的具体的某个元素
            open 代表的就是sql语句的起始符号
            close 代表的就是sql语句的结束符号
            separator 代表就是sql语句的条件的连接符号
        -->
        <foreach collection="ids" item="id" open="(" separator="OR" close=")">
            id = #{id}
        </foreach>
    </select>

    <insert id="saveList">
        insert into db_student(sno,sname,birthday) VALUES
        <foreach collection="students" item="s" separator=",">
            (#{s.sno},#{s.sname},#{s.birthday})
        </foreach>
    </insert>
</mapper>