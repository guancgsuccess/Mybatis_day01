<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--每个映射文件中的namespace的值应该就是mapper接口的全限定名[必须的]
 jdk的动态代理就是基于接口,只能代理接口.
-->
<mapper namespace="tech.aistar.day02.mapper.StudentMapper">
    <!--映射文件中的每个标签的id的值必须要和mapper接口中定义的方法的名称保持一致[必须的]-->
    <select id="findById" parameterType="_int" resultType="student">
        select id,name sname,sno from db_student where id = #{value}
    </select>


    <!--输入映射是一个对象类型 - 充分使用OGNL 对象导航语言-->
    <select id="findByIdorSname" parameterType="studentQueryVo" resultType="student">
        select * from db_student where id>#{student.id} and sname like #{student.sname}
    </select>

    <!--第二种方式:参数散列的出现在mapper接口的方法中,使用到了参数注解
        @Param("参数名称"),一旦使用到了参数注解,那么标签中的属性parameterType不需要设置了

        那么#{参数名}一定要和@Param("参数名")俩者的参数名称一定要保持一致.
     -->
    <select id="findByIdorSnameAno" resultType="student">
        select * from db_student where id>#{pid} and sname like #{pname}
    </select>

    <!--
        那么此处的#{参数名}一定要和参数中map的key保持一致
      -->
    <select id="findByIdorSnameMap" parameterType="map" resultType="student">
        select * from db_student where id>#{pid} and sname like #{pname}
    </select>

    <!--手动进行映射-->
    <resultMap id="findAllMap" type="student">
        <!--id的手动映射比较特殊-->
        <id column="_id" property="id"></id>
        <!--其余属性的映射-->
        <result column="name" property="sname"></result>
        <!--其余只要查询出来的列名和属性名保持一致,仍然是可以自动进行映射-->
    </resultMap>

    <!--一旦查询出来的列和属性不一致,那么需要使用resultMap来进行手动封装-->
    <select id="findAll" resultMap="findAllMap">
        select id _id,sno,sname name,birthday from db_student
    </select>
</mapper>