<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--mybatis的配置信息,由SqlSessionFactoryBuilder对象来读取xml文件构建出SqlSesisonFactory对象
    mybatis-config.xml文件中配置了mybatis框架运行需要的环境
-->
<configuration>
    <!--引入外部属性文件-->
    <properties resource="dbConfig.properties"></properties>
    <!--<properties resource="dbConfig.properties">-->
        <!--&lt;!&ndash;如果此处的name的属性在外部的dbConfig.properties文件中已经存在了,&ndash;&gt;-->
        <!--&lt;!&ndash;则会被外部属性文件中的配置覆盖&ndash;&gt;-->
        <!--<property name="mysql.user" value="root"></property>-->
    <!--</properties>-->

    <settings>
        <!--如果应用系统中存在多个日志框架,那么此处强制使用logfj
          如果此处没有指定,那么mybatis会按照日志的优先级进行查找日志
          commons-logging[tomcat服务器中默认存在的] log4j2 log4j
        -->
        <setting name="logImpl" value="LOG4J"/>

        <!--开启列的匈牙利命名规则到java的驼峰命名规则的映射-->
        <setting name="mapUnderscoreToCamelCase" value="true"></setting>

        <!--开启延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"></setting>

        <setting name="aggressiveLazyLoading" value="false"></setting>
    </settings>

    <!--配置类型的别名-->
    <typeAliases>
        <!--针对每个自定义对象类型,都要去取别名-->
        <!--<typeAlias type="tech.aistar.day01.entity.Student" alias="student"></typeAlias>-->

        <!--推荐使用的方式,扫描需要取别名的类的包即可
            默认的别名就是该类的名称或者是该类的名称[首字母小写]
        -->
        <package name="tech.aistar.day01.entity"></package>
        <package name="tech.aistar.day04"></package>
    </typeAliases>

    <!--配置分页插件-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor">
            <property name="dialect" value="com.github.pagehelper.PageHelper"></property>
        </plugin>
    </plugins>

    <!--default的值作用使用对应的environment的id - 告诉mybatis当前使用的环境-->
    <environments default="development">
        <!--开发环境,测试环境,生产环境-->
        <environment id="development">
            <!--mybatis默认使用的事务就是JDBC事务 - 默认是自动提交的-->
            <transactionManager type="JDBC"></transactionManager>

            <!--关于mybatis的内置的数据源
              1. UNPOOLED - 为每个请求创建和销毁连接.性能比较低下,不适合高并发的场景.几乎不用的.
              2. POOLED - 相当于是之前jdbc中学习的连接池,引入了"池"的概念.一开始会预先创建出连接放入到连接池中
                        - 当连接用完之后,不是关闭,而是释放,并且放回放入到"池"中 - 开发环境和测试环境中推荐使用的.
              3. JNDI - 如果应用服务器中存在连接池,那么mybatis会优先选择应用服务器中的连接池.生产环境中推荐使用的
            -->

            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"></property>
                <property name="url" value="${mysql.url}"></property>
                <property name="username" value="${mysql.user}"></property>
                <property name="password" value="${mysql.password}"></property>
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <!--mapper.xml文件的映射的路径的配置-->
        <mapper resource="mapperconfig/StudentDaoMapper.xml"></mapper>

        <!--mapper的映射器-->
        <!--第一种:引用类路径下的xml-->
        <!--<mapper resource="tech/aistar/day02/mapStudentMapper2.xml.xml"></mapper>-->
        <!--<mapper resource="mapperconStudentMapper2.xml.xml"></mapper>-->

        <!--第二种:使用mapper接口的全限定名\
          采用mapper代理的开发方式 - mapper接口的名称和mapper映射的名称以及位置都是一致的
        -->
        <!--<mapper class="tech.aistar.day02.mapper.StudentMapper"></mapper>-->

        <mapper resource="tech/aistar/day02/mapper/sql_all.xml"></mapper>
        <mapper resource="tech/aistar/day04/mapper/common_all.xml"></mapper>
        <!--第三种方式 - 推荐使用的方式 - 扫描包-->
        <package name="tech.aistar"></package>
        
    </mappers>
</configuration>